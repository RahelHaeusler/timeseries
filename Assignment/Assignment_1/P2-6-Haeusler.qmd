---
title: "P2-6-Haeusler"
author: "Rahel HÃ¤usler"
date: 05.08.2024 (deadline)
format: html
toc: true
toc-depth: 4
lof: true
lot: true
editor: visual
warning: false
error: false
tbl-cap-location: top
fig-cap-location: bottom
---

## Task 1

```{r}
library(data.table)
library(DataExplorer)
library(dplyr)
library(tidyr)
library(ggplot2)

myLCdata <- fread("myLCdata.csv")
dirty_data <- readRDS("dirtyfy.rds")

myLCdata_dirty <- dirty_data(myLCdata, 6)
write.csv(myLCdata_dirty, file = "myLCdata_dirty.csv", row.names = FALSE)
#create_report(myLCdata_dirty)
```

![Missing Data Profile](images/Missing%20Data%20Profile.png){#fig-missingvalues fig-align="center"}

```{r}
print(sapply(myLCdata_dirty, class))
```

## Task 2

@fig-missingvalues

```{r}
# Load necessary library
library(dplyr)

# Define a custom_summary function to calculate summary statistics in relative counts
custom_summary_num <- function(data) {
  # Compute summary statistics for numeric columns with relative counts
  summary_stats <- data %>%
    summarise(across(where(is.numeric), list(
      num_missing = ~sum(is.na(.)),
      num_nan = ~sum(is.nan(.), na.rm = TRUE),
      num_outliers = ~sum(. %in% boxplot.stats(.)$out, na.rm = TRUE)
    ), .names = "{.col}.{fn}"))
  
  return(summary_stats)
}

# Apply custom_summary function to myLCdata_dirty
summary_results_num <- custom_summary_num(myLCdata_dirty)
print(summary_results_num)


```

```{r}
custom_summary_char <- function(data) {

  # Compute summary statistics for character columns with relative counts
  summary_stats <- data %>%
    summarise(across(where(is.character),
                     .fns = list(
                       char_missing = ~sum(is.na(.)),
                       char_nan = ~sum(. == "n/a", na.rm = TRUE),
                       char_space = ~sum(. == " ", na.rm = TRUE),
                       char_empty_string = ~sum(. == "", na.rm = TRUE)
                     ), .names = "{.col}.{fn}"))
  
  return(summary_stats)
}

summary_results_char <- custom_summary_char(myLCdata_dirty)
print(summary_results_char)


```

```{r}
num_rows <- nrow(myLCdata_dirty)

relative <- function(df) {
  df <- df / num_rows
  return(df)
}

summary_relative_char <- relative(summary_results_char)
summary_relative_num <- relative(summary_results_num)
print(summary_relative_char)
print(summary_relative_num)

```

```{r}
format_change <- function(df) {
  new_df <- df %>%
    pivot_longer(
      cols = everything(),
      names_to = "attribute", 
      values_to = "value"
    ) %>%
    separate(attribute, into = c("attribute", "metric"), sep = "\\.", remove = FALSE) %>%
    pivot_wider(
      names_from = metric,
      values_from = value
    ) %>%
    arrange(attribute)
  
  return(new_df)
}

final_char <- format_change(summary_relative_char)
final_num <- format_change(summary_relative_num)
print(final_char)
print(final_num)
```

## Visualization

```{r}
visualize <- function(df) {
  # Melt the dataframe to long format
  final_num_long <- tidyr::pivot_longer(df, cols = -attribute, names_to = "calculation", values_to = "percentage")

  # Create the plot
  plot <- ggplot(final_num_long, aes(x = percentage, y = attribute, fill = attribute)) +
    geom_bar(stat = "identity", position = "dodge") +
    scale_x_continuous(labels = scales::percent) +
    labs(y = "Attribute", x = "Percentage", title = "Percentage Calculation by Attribute") +
    facet_wrap(~calculation, scales = "free_x", ncol = 1) +  # Facet by calculation and set facet label as calculation
    theme_minimal() +
    theme(legend.position = "none")  # Remove legend
  
  return(plot)
}

plot.num <- visualize(final_num)
print(plot.num)
plot.char <- visualize(final_char)
print(plot.char)
```
